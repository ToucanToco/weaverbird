name: CI (server)

on:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request, only if `server/` files are modified
  push:
    branches:
      - master
    paths:
      - 'server/**'
      - '.github/workflows/ci-server.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'server/**'
      - '.github/workflows/ci-server.yml'

jobs:
  run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.11']
        pandas-version: ['<2','>=2']
        # Pandas<2 is not supported on Python 3.12
        exclude:
          - python-version: '3.12'
            pandas-version: '<2'

    defaults:
      run:
        working-directory: server

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: |
        pip install poetry
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: make install-dev

    - name: Install pandas ${{ matrix.pandas-version }}
      run: pip install "pandas${{ matrix.pandas-version }}"

    - name: Lint
      run: make lint

    - name: Test
      env:
        # Snowflake
        SNOWFLAKE_PASSWORD: '${{ secrets.SNOWFLAKE_PASSWORD }}'
        # Redshift
        REDSHIFT_USER: '${{ secrets.REDSHIFT_USER }}'
        REDSHIFT_PASSWORD: '${{ secrets.REDSHIFT_PASSWORD }}'
        REDSHIFT_PORT: '${{ secrets.REDSHIFT_PORT }}'
        REDSHIFT_HOST: '${{ secrets.REDSHIFT_HOST }}'
        REDSHIFT_DATABASE: '${{ secrets.REDSHIFT_DATABASE }}'
        # Athena
        ATHENA_OUTPUT: '${{ secrets.ATHENA_OUTPUT }}'
        ATHENA_DATABASE: '${{ secrets.ATHENA_DATABASE }}'
        ATHENA_ACCESS_KEY_ID: '${{ secrets.ATHENA_ACCESS_KEY_ID }}'
        ATHENA_SECRET_ACCESS_KEY: '${{ secrets.ATHENA_SECRET_ACCESS_KEY }}'
        ATHENA_REGION: '${{ secrets.ATHENA_REGION }}'
        # GBQ
        GOOGLE_BIG_QUERY_CREDENTIALS: '${{ secrets.GOOGLE_BIG_QUERY_CREDENTIALS }}'
      run: make test && make test-serial
      timeout-minutes: 25
