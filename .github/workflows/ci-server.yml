name: CI (server)

# Temporary for the CI to test the bump of pydantic
on: [push]

jobs:
  run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.10', '3.11']
        pydantic-version: ['^1.10', '^2.0']

    defaults:
      run:
        working-directory: server

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: |
        pip install poetry
        poetry config virtualenvs.create false

    - name: Update Pydantic version on the toml & lock
      run: |
        # we update the pydantic version corresponding to the matrix
        sed -i "s/pydantic = \".*\"/pydantic = \"${PYDANTIC_VERSION}\"/" pyproject.toml
        poetry lock --no-update
      env:
        PYDANTIC_VERSION: ${{ matrix.pydantic-version }}

    - name: Install dependencies
      run: make install-dev

    - name: Lint
      run: make lint

    - name: Test
      env:
        SNOWFLAKE_PASSWORD: '${{ secrets.SNOWFLAKE_PASSWORD }}'
        REDSHIFT_PASSWORD: '${{ secrets.REDSHIFT_PASSWORD }}'
        ATHENA_OUTPUT: '${{ secrets.ATHENA_OUTPUT }}'
        ATHENA_DATABASE: '${{ secrets.ATHENA_DATABASE }}'
        ATHENA_ACCESS_KEY_ID: '${{ secrets.ATHENA_ACCESS_KEY_ID }}'
        ATHENA_SECRET_ACCESS_KEY: '${{ secrets.ATHENA_SECRET_ACCESS_KEY }}'
        ATHENA_REGION: '${{ secrets.ATHENA_REGION }}'
        GOOGLE_BIG_QUERY_CREDENTIALS: '${{ secrets.GOOGLE_BIG_QUERY_CREDENTIALS }}'
      run: make test && make test-serial
      timeout-minutes: 25
