[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "weaverbird"
version = "0.38.1"
description = "A visual data pipeline builder with various backends"
authors = ["Toucan Toco <dev@toucantoco.com>"]
keywords = ["mongodb", "pandas", "sql", "data", "dataviz", "pipeline", "query", "builder"]
license = "BSD-3-Clause"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10, <3.12"
pydantic = "^1.9.1"

# Dependencies for extras
## Pandas
pandas = {version = "^1.2.5", optional = true}
geopandas = {version = ">=0.12.2,<0.15.0", optional = true}
## PyPika
PyPika = {version = "^0.48.9", optional = true}
## Playground
quart = {version = ">=0.17,<0.20", optional = true}
Quart-CORS = {version = ">=0.5,<0.8", optional = true}
hypercorn = {version = ">=0.13,<0.15", optional = true}
pymongo = {version = ">=4.2.0", optional = true, extras = ["srv", "tls"]}
psycopg = {optional = true, version = "^3.0.15"}
toucan-connectors = {version = "^4.5.1", optional = true, extras = ["google_big_query", "mongo", "Redshift", "snowflake", "awsathena", "mysql"]}

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-asyncio = "^0.21.0"
# required so we can use nosql_apply_parameters_to_query during tests
toucan-connectors = { version = "^4.5.1", extras = ["google_big_query", "mongo", "Redshift", "snowflake", "awsathena"] }
pytest-benchmark = "^4.0.0"
snowflake-sqlalchemy = "^1.5.0"
types-python-dateutil = "^2.8.19"
pytest = "^7.4.1"
pytest-xdist = ">=2.5,<4.0"
black = "^23.7.0"
mypy = ">=0.990,<2"
docker = "^6.1.3"
sqlalchemy = "^1.4.49"
pymysql = "^1.1.0"
psycopg2 = "^2.9.7"
pymongo = ">=4.2.0"
sqlalchemy-redshift = ">=0.8.11,<1"
PyYAML = "^6.0"
ruff = ">=0.0.287,<0.0.293"
pre-commit = "^3.4.0"

[tool.poetry.extras]
# Lib
pandas = ["pandas", "geopandas"]
pypika = ["pypika"]
all = ["pandas", "geopandas", "pypika"]
# playground
playground = ["quart", "Quart-CORS", "hypercorn", "pymongo", "pandas", "psycopg", "toucan-connectors"]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.mypy]
files = "src/"
exclude = "weaverbird/backends/sql_translator"
plugins = "pydantic.mypy"
follow_imports = "silent"
ignore_missing_imports = true
allow_redefinition = true
check_untyped_defs = true

[tool.pytest.ini_options]
env = [
    "PYTHONPATH = ."
]
testpaths = "tests"
markers = [
    "serial: marks tests as serial (deselect with '-m \"not serial\"')",
]

[tool.ruff]
# a bit longer to allow for some lines which black would not wrap
line-length = 120
select = ["E", "F", "UP", "N", "C", "B", "I001", "S"]
ignore = [
       "S101", # allow use of assert
       "C901", # do not check complexity
       "S311", # allow use of `random` module (non-cyptographic)
       "N815", # allow mixed case (pydantic models)
       "N818", # allow exceptions that do not end with the `Error` suffix
]

# Exclude a variety of commonly ignored directories.
exclude = [".git", ".direnv"]
# Assume Python 3.10.
target-version = "py310"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pep8-naming]
# Allow a few decorators to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]
# Allow a few extra names
ignore-names = ["PipelineTranslationFailure", "REGEXP_LIKE_Translator", "REGEXP_CONTAINS_Translator"]
