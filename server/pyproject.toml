[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "weaverbird"
version = "0.48.4"
description = "A visual data pipeline builder with various backends"
authors = ["Toucan Toco <dev@toucantoco.com>"]
keywords = [
    "builder",
    "data",
    "dataviz",
    "mongodb",
    "pandas",
    "pipeline",
    "query",
    "sql",
]
license = "BSD-3-Clause"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11, <3.13"
pydantic = "^2.4.2"

# Dependencies for extras
## Pandas
pandas = [
    { version = "^1.2.5", optional = true, python = "<3.12" },
    { version = "^2", optional = true, python = ">=3.12" },
]
geopandas = { version = "<2", optional = true }
## PyPika
PyPika = { version = "^0.48.9", optional = true }
## Playground
quart = { version = ">=0.17,<0.20", optional = true }
Quart-CORS = { version = ">=0.5,<0.8", optional = true }
hypercorn = { version = ">=0.13,<0.18", optional = true }
pymongo = { version = ">=4.2.0", optional = true, extras = ["srv", "tls"] }
psycopg = { optional = true, version = "^3.0.15" }
toucan-connectors = { version = "^6.3.0", optional = true, extras = [
    "awsathena",
    "google_big_query",
    "mongo",
    "mysql",
    "Redshift",
    "snowflake",
] }
python-dateutil = "^2.8.2"

[tool.poetry.group.dev.dependencies]
pytest-cov = ">=4.1,<7.0"
pytest-mock = "^3.11.1"
pytest-asyncio = ">=0.21,<0.25"
# required so we can use nosql_apply_parameters_to_query during tests
toucan-connectors = { version = "^6.3.0", extras = [
    "awsathena",
    "google_big_query",
    "mongo",
    "mysql",
    "Redshift",
    "snowflake",
] }
pytest-benchmark = ">=4,<6"
snowflake-sqlalchemy = "^1.6.1"
types-python-dateutil = "^2.8.19"
pytest = ">=7.4.1,<9.0.0"
pytest-xdist = ">=2.5,<4.0"
mypy = ">=0.990,<2"
docker = ">=6.1.3,<8.0.0"
sqlalchemy = "^2"
pymysql = "^1.1.0"
psycopg2 = "^2.9.7"
pymongo = ">=4.2.0"
PyYAML = "^6.0"
redshift-connector = "^2.1.3"
ruff = ">=0.5.0,<0.8"
pre-commit = ">=3.4,<5.0"
tenacity = ">=8.4.2,<10.0.0"

[tool.poetry.extras]
# Lib
pandas = ["pandas", "geopandas"]
pypika = ["pypika"]
all = ["pandas", "geopandas", "pypika"]
# playground
playground = [
    "hypercorn",
    "pandas",
    "psycopg",
    "pymongo",
    "quart",
    "Quart-CORS",
    "toucan-connectors",
]

[tool.mypy]
files = "src/"
exclude = "weaverbird/backends/sql_translator"
plugins = "pydantic.mypy"
follow_imports = "silent"
ignore_missing_imports = true
allow_redefinition = true
check_untyped_defs = true

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
markers = ["serial: marks tests as serial (deselect with '-m \"not serial\"')"]

[tool.ruff]
# a bit longer to allow for some lines which black would not wrap
line-length = 120
# Exclude a variety of commonly ignored directories.
exclude = [".git", ".direnv"]
# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "UP", "N", "C", "B", "I001", "S"]
ignore = [
    "S101", # allow use of assert
    "C901", # do not check complexity
    "S311", # allow use of `random` module (non-cyptographic)
    "N815", # allow mixed case (pydantic models)
    "N818", # allow exceptions that do not end with the `Error` suffix
]


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pep8-naming]
# Allow a few decorators to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]
# Allow a few extra names
ignore-names = [
    "PipelineTranslationFailure",
    "REGEXP_LIKE_Translator",
    "REGEXP_CONTAINS_Translator",
]
